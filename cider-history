;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(char )" "(char 0x2508)" "(first {:a 1 :b 2})" "(next [1 2 3 4])" "(first [1 2 3 4])" "(first '(1 2 3 4))" "(next '(1 2 3 4))" "(char 0x046A)" "(char 0x06DE)" "(char 0x03A8)" "(-> 5 (+ 2) (- 1))" "(as-> 4 t (+ t 2) (* t 3))" "(as-> t 4 (+ t 2) (* t 3))" "(-> 4 (* 2) (+ 3))" "(-> 1 (* 2) (+ 3))" "(assoc {} :a 1 :b 2 :c 3)" "(assoc {} :a 1)" "(merge {:a 1 :b 2} {:a 3 :d 5})" "(merge {:a 1 :b 2} {:c 3 :d 5})" "(map #(* %1 %2) [1 2 3] [4 5 6])" "(rand 12)" "(rand 10)" "(java.lang.Math/log 10)" "(log 10)" "(fac 20)" "(fac 30)" "(fac 45)" "(fac 6)" "(fac 5)" "(fac 4)" "(fac 3)" "(fac 2)" "(fac 1)" "(let [x 2 y (+ x 2)] y)" ")" "(let [x 2])" "(min-by :a [{:a 1 :b \"word\"} {:a 42 :b \"num\"} {:a -7 :b :neg-7}])" "(max-by :a [{:a 1 :b \"word\"} {:a 42 :b \"num\"} {:a -7 :b :neg-7}])" "(doc min-by)" "(max-by :a [{:a 1 :b \"word\"} {:a 42 :b \"num\"} {:a -7 :b :neg-7}])" "(max-by :a [{:a 1 :b \"word\"}])" "(wtf [1 2 3 4 5 6 7 8])" "(doc train)" "(contains? l 1)" "(contains? v 1)" "(hash-set 1 2 1 3 1 4 1 5)" "(conj l 4)" "(def l '(1 2 3))" "(conj v 4)" "(conj 4 v)" "(get v 0)" "(def v [1 2 3])" "(:nonexistent *map*)" "(:b *map*)" "(:a *map*)" "*map*" "(def *map* {:a 1 :b 2 :c 3})" "(/ 1 5)" "(and \"t\" 53 nil)" "(and nil \"t\")" "(or nil false false false)" "(or nil false nil nil)" "(nil? nil)" "(nil? '())" "(if true)")